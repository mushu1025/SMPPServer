import org.jsmpp.server.DefaultSmppServer;
import org.jsmpp.server.SmppServerConfiguration;
import org.jsmpp.server.SmppServerSession;
import org.jsmpp.session.*;
import org.jsmpp.util.MessageIDGenerator;
import org.jsmpp.util.MessageId;

public class SMPPServer {

    private static final int PORT = 2775;
    private static final String SYSTEM_ID = "your_system_id";
    private static final String PASSWORD = "your_password";

    private SMPPServerSessionListener sessionListener;

    public void startServer() {
        try {
            SmppServerConfiguration serverConfig = new SmppServerConfiguration();
            serverConfig.setPort(PORT);

            DefaultSmppServer smppServer = new DefaultSmppServer(serverConfig);
            sessionListener = smppServer.getSessionHandler();

            BindParameter bindParameter = new BindParameter(
                    BindType.BIND_TRX,
                    SYSTEM_ID,
                    PASSWORD,
                    "",
                    TypeOfNumber.UNKNOWN,
                    NumberingPlanIndicator.UNKNOWN,
                    ""
            );
            sessionListener.setDefaultBindType(bindParameter.getBindType());
            sessionListener.setDefaultSystemId(bindParameter.getSystemId());
            sessionListener.setDefaultPassword(bindParameter.getPassword());
            sessionListener.setDefaultAddressRange(bindParameter.getAddressRange());

            sessionListener.setMessageReceiverListener(new ServerMessageReceiverListenerImpl());

            smppServer.start();
            System.out.println("SMPP server started on port " + PORT);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void stopServer() {
        if (sessionListener != null) {
            sessionListener.destroy();
        }
    }

    public static void main(String[] args) {
        SMPPServer smppServer = new SMPPServer();
        smppServer.startServer();
    }

    private static class ServerMessageReceiverListenerImpl implements MessageReceiverListener {

        private MessageIDGenerator messageIdGenerator;

        public ServerMessageReceiverListenerImpl() {
            messageIdGenerator = new MessageIDGenerator();
        }

        @Override
        public DataSmResult onAcceptDataSm(DataSm dataSm, Session session) throws ProcessRequestException {
            return null;
        }

        @Override
        public void onAcceptAlertNotification(AlertNotification alertNotification, Session session) {

        }

        @Override
        public SubmitMultiResult onAcceptSubmitMulti(SubmitMulti submitMulti, Session session) throws ProcessRequestException {
            return null;
        }

        @Override
        public QuerySmResult onAcceptQuerySm(QuerySm querySm, Session session) throws ProcessRequestException {
            return null;
        }

        @Override
        public MessageId onAcceptSubmitSm(SubmitSm submitSm, SMPPServerSession session) throws ProcessRequestException {
            System.out.println("Received message: " + submitSm.getShortMessage());
            return messageIdGenerator.newMessageId();
        }

        @Override
        public SubmitSmResult onAcceptSubmitSm(SubmitSm submitSm, SMPPServerSession source) throws ProcessRequestException {
            return null;
        }
    }
}
