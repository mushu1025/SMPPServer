import org.jsmpp.bean.BindRequest;
import org.jsmpp.bean.BindResponse;
import org.jsmpp.bean.DeliverSm;
import org.jsmpp.bean.DeliverSmResp;
import org.jsmpp.bean.Unbind;
import org.jsmpp.extra.ProcessRequestException;
import org.jsmpp.session.SMPPServerSession;
import org.jsmpp.session.SMPPServerSessionListener;
import org.jsmpp.session.ServerMessageReceiverListener;
import org.jsmpp.session.SessionStateListener;
import org.jsmpp.util.MessageIDGenerator;
import org.jsmpp.util.MessageId;
import org.jsmpp.util.RandomMessageIDGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class SMPPServer {

    private static final Logger logger = LoggerFactory.getLogger(SMPPServer.class);

    private static final String SYSTEM_ID = "YOUR_SYSTEM_ID";
    private static final String PASSWORD = "YOUR_PASSWORD";
    private static final int PORT = 2775;

    private MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator();

    public void startServer() {
        try {
            SMPPServerSessionListener sessionListener = new SMPPServerSessionListener(PORT);
            sessionListener.setSessionStateListener(new SessionStateListenerImpl());
            sessionListener.setMessageReceiverListener(new MessageReceiverListenerImpl());
            logger.info("SMPP server started on port " + PORT);

            while (true) {
                SMPPServerSession serverSession = sessionListener.accept();
                logger.info("Accepted client connection");

                BindRequest bindRequest = serverSession.waitForBind(5000);
                if (bindRequest.getSystemId().equals(SYSTEM_ID) && bindRequest.getPassword().equals(PASSWORD)) {
                    BindResponse bindResponse = new BindResponse(bindRequest);
                    bindResponse.setSystemId(bindRequest.getSystemId());
                    serverSession.sendResponse(bindResponse);

                    while (serverSession.isBound()) {
                        try {
                            if (serverSession.waitForActivity()) {
                                serverSession.processActivity();
                            }
                        } catch (IOException e) {
                            logger.error("IOException occurred", e);
                        } catch (ProcessRequestException e) {
                            logger.error("ProcessRequestException occurred", e);
                        }
                    }
                } else {
                    serverSession.unbindAndClose();
                    logger.error("Invalid system ID or password");
                }
            }
        } catch (IOException e) {
            logger.error("IOException occurred", e);
        }
    }

    private class SessionStateListenerImpl implements SessionStateListener {
        @Override
        public void onStateChange(SessionState newState, SessionState oldState, Object source) {
            logger.info("Session state changed from " + oldState + " to " + newState);
        }
    }

    private class MessageReceiverListenerImpl implements ServerMessageReceiverListener<DeliverSm> {
        @Override
        public void onAcceptDeliverSm(DeliverSm deliverSm, SMPPServerSession session) throws ProcessRequestException {
            handleIncomingMessage(session, deliverSm);
        }
    }

    private void handleIncomingMessage(SMPPServerSession session, DeliverSm deliverSm) throws ProcessRequestException {
        String messageId = messageIDGenerator.newMessageId();
        MessageId messageIdObj = MessageId.parseString(messageId);

        // Process the incoming message
        // You can access the message content with deliverSm.getShortMessage()

        // Send a response to the client
        DeliverSmResp deliverSmResp = new DeliverSmResp();
        deliverSmResp.setMessageId(messageIdObj.getValue());
        session.sendResponsePdu(deliverSmResp);
    }

    public static void main(String[] args) {
        SMPPServer smppServer = new SMPPServer();
        smppServer.startServer();
    }
}
