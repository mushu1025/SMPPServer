import org.jsmpp.bean.*;
import org.jsmpp.session.*;
import org.jsmpp.util.MessageIDGenerator;
import org.jsmpp.util.MessageId;
import org.jsmpp.util.RandomMessageIDGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

public class SMPPServer {

    private static final Logger logger = LoggerFactory.getLogger(SMPPServer.class);

    private static final String SYSTEM_ID = "YOUR_SYSTEM_ID";
    private static final String PASSWORD = "YOUR_PASSWORD";
    private static final int PORT = 2775;

    private MessageIDGenerator messageIDGenerator = new RandomMessageIDGenerator();

    public void startServer() {
        try {
            SMPPServerSessionListener sessionListener = new SMPPServerSessionListener(PORT);
            logger.info("SMPP server started on port " + PORT);

            while (true) {
                SMPPServerSession serverSession = sessionListener.accept();
                logger.info("Accepted client connection");

                BindRequest bindRequest = serverSession.waitForBind(5000);
                if (bindRequest.getSystemId().equals(SYSTEM_ID) && bindRequest.getPassword().equals(PASSWORD)) {
                    serverSession.sendResponse(bindRequest.createResponse(SMPPConstant.STAT_ESME_ROK));

                    while (serverSession.getSessionState().isBound()) {
                        try {
                            Activity activity = serverSession.waitForActivity();
                            if (activity instanceof DeliverSm) {
                                handleIncomingMessage(serverSession, (DeliverSm) activity);
                            } else if (activity instanceof Unbind) {
                                serverSession.sendResponse(((Unbind) activity).createResponse());
                                serverSession.unbindAndClose();
                                logger.info("Client unbound");
                                break;
                            } else {
                                // Handle other activities if necessary
                            }
                        } catch (IOException | PDUStringException | ResponseTimeoutException e) {
                            logger.error("Error occurred while waiting for activity", e);
                        }
                    }
                } else {
                    serverSession.sendResponse(bindRequest.createResponse(SMPPConstant.STAT_ESME_RINVPASWD));
                    serverSession.unbindAndClose();
                    logger.error("Invalid system ID or password");
                }
            }
        } catch (IOException e) {
            logger.error("Error occurred", e);
        }
    }

    private void handleIncomingMessage(SMPPServerSession session, DeliverSm deliverSm) throws IOException {
        String messageId = messageIDGenerator.newMessageId();
        MessageId messageIdObj = MessageId.parseString(messageId);

        // Process the incoming message
        // You can access the message content with deliverSm.getShortMessage()

        // Send a response to the client
        DeliverSmResp deliverSmResp = new DeliverSmResp();
        deliverSmResp.setMessageId(messageIdObj.getValue());
        session.sendResponsePdu(deliverSmResp);
    }

    public static void main(String[] args) {
        SMPPServer smppServer = new SMPPServer();
        smppServer.startServer();
    }
}
