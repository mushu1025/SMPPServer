import org.jsmpp.bean.BindType;
import org.jsmpp.bean.NumberingPlanIndicator;
import org.jsmpp.bean.TypeOfNumber;
import org.jsmpp.server.SMPPServer;
import org.jsmpp.server.SessionStateListener;
import org.jsmpp.server.SmppSession;
import org.jsmpp.session.BindParameter;
import org.jsmpp.session.SMPPServerSessionListener;

public class SMPPServer {

    private static final int PORT = 2775; // 服务器端口号
    private static final String SYSTEM_ID = "your_system_id"; // 服务器的系统 ID
    private static final String PASSWORD = "your_password"; // 服务器的密码
    private static final String SYSTEM_TYPE = "your_system_type"; // 服务器的系统类型
    private static final TypeOfNumber ADDRESS_TON = TypeOfNumber.UNKNOWN; // 服务器的地址类型
    private static final NumberingPlanIndicator ADDRESS_NPI = NumberingPlanIndicator.UNKNOWN; // 服务器的地址编号计划

    public void startServer() {
        try {
            SMPPServer smppServer = new SMPPServer(PORT);
            smppServer.setSessionStateListener(new SessionStateListenerImpl());
            smppServer.setSmppSessionHandler(new SmppSessionHandlerImpl());

            SMPPServerSessionListener sessionListener = smppServer.getSessionListener();
            sessionListener.setPort(PORT);

            BindParameter bindParameter = new BindParameter(
                    BindType.BIND_TRX,
                    SYSTEM_ID,
                    PASSWORD,
                    SYSTEM_TYPE,
                    ADDRESS_TON,
                    ADDRESS_NPI,
                    ""
            );

            sessionListener.setBindParameter(bindParameter);

            smppServer.start();
            System.out.println("SMPP server started on port " + PORT);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SMPPServer smppServer = new SMPPServer();
        smppServer.startServer();
    }

    private static class SessionStateListenerImpl implements SessionStateListener {
        @Override
        public void onStateChange(SmppSession session, SessionState newState, SessionState oldState) {
            System.out.println("Session state changed from " + oldState + " to " + newState);
        }
    }

    private static class SmppSessionHandlerImpl extends org.jsmpp.session.ServerMessageReceiverListener {
        @Override
        public void onAcceptDeliverSm(org.jsmpp.session.SMPPServerSession session, org.jsmpp.bean.DeliverSm deliverSm) throws org.jsmpp.extra.ProcessRequestException {
            // 处理传入的消息
        }
    }
}
